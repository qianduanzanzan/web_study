/**
 * 为什么要模块化
 * 
 * 在页面越来越多，js越写越复杂的情况下
 * 为了解决两个问题
 * 1.首先防止全局代码逻辑混乱，需要根据业务逻辑划分模块；
 * 2.次是不同开发人员负责不同的模块，防止命名冲突或者是自己的声明的变量方法被别人误改，需要根据人员划分模块；
 * 
 */


/**
 * CommonJS 规范
 * 
 * 1.导出：module.exports = {}、exports.xxx = 'xxx'
 * 
 * 2.导入：require(./index.js)
 * 
 * 3.查找方式：查找当前目录是否具有文件，没有则查找当前目录的 node_modules 文件。再没有，冒泡查询，一直往系统中的 npm 目录查找。
 * 
 * 特点：
 * 
 * 1.所有代码在模块作用域内运行，不会污染其他文件
 * 
 * 2.require 得到的值是值的拷贝，即你引用其他 JS 文件的变量，修改操作了也不会影响其他文件
 * 
 * 缺点
 * 
 * 1.应用层面。在 index.html 中做 var index = require('./index.js') 操作报错，因为它最终是后台执行的，只能是 index.js 引用 index2.js 这种方式。
 * 
 * 2.同步加载问题。CommonJS 规范中模块是同步加载的，即在 index.js 中加载 index2.js，如果 index2.js 卡住了，那就要等很久。
 * 
 */
